#!/bin/bash -e

declare PROVIDER="virtualbox"
declare -i ISDESTROY=0
declare SIZING="small"
declare K8S_DOMAIN="k8s.local"
declare MIRROR_REGISTRY=""
declare MIRROR_APT=""
declare MIRROR_PYPI=""
declare CNI_PLUGIN="calico"
declare CSI_PLUGIN="none"
declare ANSIBLE_TAG=""
declare CERT_ISSUER="my-ca-issuer"
declare SSH_PARAMS="-C -o ControlMaster=auto -o ControlPersist=60s -o ConnectTimeout=30 -o ConnectionAttempts=5 -o StrictHostKeyChecking=no"
declare KEEPALIVED_PASSWORD=""
KEEPALIVED_PASSWORD="$(LC_ALL=C tr -dc A-Za-z0-9 </dev/urandom | head -c 8 ; echo '')"

# Help function
deployhelp() {
  cat <<EOF
Usage: $0 [options]
-h                                this is some help text.
-d                                destroy all previously provisioned vms
-c xxxx                           CNI plugin, choices are weave, flannel, calico (default), cilium
-p xxxx                           vagrant provider, default is virtualbox
-s xxxx                           sizing deployment, default is small
                                  - small : 1 manager and 1 nodes, host with 8Go ram / 2 cores
                                  - medium : 3 managers and 2 nodes host with 16Go ram / 4 cores
                                  - large : 3 managers and 5 nodes, host with 24Go ram / 6 cores
-t xxxx                           ansible tag, default is none
--keepalived-password xxxx        keepalived password, default is randomly generated
--kube-domain xxxx                global kubernetes domain, default is $K8S_DOMAIN
--container-registry-mirror xxxx  container private mirror registry
--apt-repository-mirror xxxx      mirror repository URL for apt packages
--pypi-repository-mirror xxxx     mirror repository URL for pypi packages
--cert-issuer-type xxxx           Issuer for managing SSL certs, choices are my-ca-issuer (default), letsencrypt-staging, letsencrypt-prod
EOF

exit 1
}

# Parse cmd options
while (($# > 0)); do
  case "$1" in
    -d)
      shift
      ISDESTROY=1
      ;;
    -c)
      shift
      CNI_PLUGIN="$1"
      shift
      ;;
    --cert-issuer-type)
      shift
      if [[ "$1" = "letsencrypt-staging" ]]; then
        CERT_ISSUER="$1"
      fi
      if [[ "$1" = "letsencrypt-prod" ]]; then
        CERT_ISSUER="$1"
      fi
      shift
      ;;
    --keepalived-password)
      shift
      KEEPALIVED_PASSWORD="$1"
      shift
      ;;
    --kube-domain)
      shift
      K8S_DOMAIN="$1"
      shift
      ;;
    --container-registry-mirror)
      shift
      MIRROR_REGISTRY="$1"
      shift
      ;;
    --apt-repository-mirror)
      shift
      MIRROR_APT="$1"
      shift
      ;;
    --pypi-repository-mirror)
      shift
      MIRROR_PYPI="$1"
      shift
      ;;
    -s)
      shift
      SIZING="$1"
      shift
      ;;
    -p)
      shift
      PROVIDER="$1"
      shift
      ;;
    -t)
      shift
      ANSIBLE_TAG="$1"
      shift
      ;;
    -h)
      shift
      deployhelp
      ;;
    *)
      shift
      deployhelp
      ;;
  esac
done

# Ensure valid sizing
[[ -f "vagrantfiles/Vagrantfile_${SIZING}" ]] || SIZING="small"

# Enable rook CSI if at least 3 workers
[[ $SIZING = "small" ]] || CSI_PLUGIN="rook"

# Clean older bootstrap
if ((ISDESTROY == 1)); then
  vagrant destroy -f || echo "No vms previously installed"
fi


# Launch vagrant vms
ln -sf "vagrantfiles/Vagrantfile_${SIZING}" Vagrantfile
if [[ "$PROVIDER" = "virtualbox" ]]; then
  export VAGRANT_EXPERIMENTAL="disks"
fi
vagrant up --provider="$PROVIDER"
sleep 15

# Disable cowsay ansible output
export ANSIBLE_NOCOWS=1

mkdir -p tmp

MIRROR_REGISTRY_PARAM=""
[[ -n "$MIRROR_REGISTRY" ]] && MIRROR_REGISTRY_PARAM="-e crio_mirror=$MIRROR_REGISTRY"

MIRROR_APT_PARAM=""
[[ -n "$MIRROR_APT" ]] && MIRROR_APT_PARAM="-e internal_repos_apt=$MIRROR_APT"

MIRROR_PYPI_PARAM=""
[[ -n "$MIRROR_PYPI" ]] && MIRROR_PYPI_PARAM="-e internal_repos_pypi=$MIRROR_PYPI"

MIRROR_PARAMS="$MIRROR_REGISTRY_PARAM $MIRROR_APT_PARAM $MIRROR_PYPI_PARAM"

[[ -n "$ANSIBLE_TAG" ]] && MIRROR_PARAMS="$MIRROR_PARAMS -t $ANSIBLE_TAG"

# Deploy an openstack installation
pushd ansible >/dev/null
ln -sf "inventories/inventory_${SIZING}" inventory
ln -sf "sizing_vars/sizing_vars_${SIZING}.yml" sizing_vars.yml
mkdir -p collections/ansible_collections
ansible-galaxy collection install -r requirements.yml -p ./collections/
if [[ -n "$MIRROR_PARAMS" ]]; then
  eval "ansible-playbook --ssh-extra-args=\"$SSH_PARAMS\" -e global_cert_issuer=$CERT_ISSUER \
    $MIRROR_PARAMS -e cni_plugin=$CNI_PLUGIN -e keepalived_pass=$KEEPALIVED_PASSWORD \
    -e global_domain=$K8S_DOMAIN -e csi_plugin=$CSI_PLUGIN -e csi_rook_disk=sdb -i inventory playbook.yml 2>&1"
else
  ansible-playbook --ssh-extra-args="$SSH_PARAMS" -e "global_cert_issuer=$CERT_ISSUER" \
    -e "cni_plugin=$CNI_PLUGIN" -e "keepalived_pass=$KEEPALIVED_PASSWORD" \
    -e "global_domain=$K8S_DOMAIN" -e "csi_plugin=$CSI_PLUGIN" -e "csi_rook_disk=sdb" -i inventory playbook.yml 2>&1
fi
popd >/dev/null

