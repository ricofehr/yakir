---

- name: Generate kubeadm.conf for first manager node
  become: true
  when: k8s_managers_group_name in group_names
  ansible.builtin.template:
    src: templates/kubeadm.conf.j2
    dest: /etc/kubernetes/kubeadm.conf
    mode: '0644'
    force: false
  run_once: true
  delegate_to: "{{ k8s_man01_hostname }}"

- name: Init first manager node
  become: true
  when: k8s_managers_group_name in group_names
  ansible.builtin.command: kubeadm init --config /etc/kubernetes/kubeadm.conf
  args:
    creates: "{{ ansible_env.HOME }}/.kubeadm_init"
  run_once: true
  delegate_to: "{{ k8s_man01_hostname }}"

- name: Create a state file for the kubeadm command execution
  when: k8s_managers_group_name in group_names
  ansible.builtin.copy:
    content: ""
    dest: "{{ ansible_env.HOME }}/.kubeadm_init"
    force: false
    mode: '0640'
  run_once: true
  delegate_to: "{{ k8s_man01_hostname }}"

- name: Get token from control-plane node
  become: true
  when: inventory_hostname != k8s_man01_hostname
  ansible.builtin.shell: |
    set -e -o pipefail
    kubeadm token create --print-join-command | cut -d ' ' -f5,7
  args:
    executable: /bin/bash
  register: k8s_token_print
  delegate_to: "{{ k8s_man01_hostname }}"
  changed_when: false

- name: Get certificate key
  become: true
  when: inventory_hostname != k8s_man01_hostname
  ansible.builtin.shell: |
    set -e -o pipefail
    kubeadm init phase upload-certs --upload-certs | tail -n 1 | tr -d "\n"
  args:
    executable: /bin/bash
  register: k8s_cert_key
  delegate_to: "{{ k8s_man01_hostname }}"
  changed_when: false

- name: Set kubeadm template variables
  when: inventory_hostname != k8s_man01_hostname
  ansible.builtin.set_fact:
    k8s_token: "{{ k8s_token_print.stdout.split(' ')[0] }}"
    k8s_cert_hash: "{{ k8s_token_print.stdout.split(' ')[1] }}"
    k8s_cert_key: "{{ k8s_cert_key.stdout }}"

- name: Generate kubeadm.conf for joined nodes
  become: true
  when: inventory_hostname != k8s_man01_hostname
  ansible.builtin.template:
    src: templates/kubeadm-join.conf.j2
    dest: /etc/kubernetes/kubeadm.conf
    force: false
    mode: '0644'

- name: Add node
  become: true
  when: inventory_hostname != k8s_man01_hostname
  ansible.builtin.command:
    cmd: kubeadm join {{ k8s_controlplane_endpoint }}:{{ k8s_controlplane_port }} --config /etc/kubernetes/kubeadm.conf
  args:
    creates: "{{ ansible_env.HOME }}/.kubeadm_join"

- name: Create a state file for the kubeadm command execution
  when: inventory_hostname != k8s_man01_hostname
  ansible.builtin.copy:
    content: ""
    dest: "{{ ansible_env.HOME }}/.kubeadm_join"
    force: false
    mode: '0640'

- name: Wait for local kubernetes API is reachable
  when: k8s_managers_group_name in group_names
  ansible.builtin.wait_for:
    host: "{{ k8s_node_ip }}"
    port: "{{ k8s_controlplane_port }}"
    delay: 5

- name: Wait for VIP kubernetes API is reachable
  when: k8s_managers_group_name in group_names
  ansible.builtin.wait_for:
    host: "{{ k8s_controlplane_endpoint_ip }}"
    port: "{{ k8s_controlplane_port }}"
    delay: 5

- name: Ensure kubelet is in a running state
  become: true
  ansible.builtin.service:
    name: kubelet
    state: started
  register: k8s_kubelet_details
  until: k8s_kubelet_details.status.ActiveState == "active"
  retries: 25
  delay: 20

...
