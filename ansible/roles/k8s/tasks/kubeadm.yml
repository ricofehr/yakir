---

- name: Generate cloud-config file (for Openstack provider)
  become: true
  when: is_cloud == '1'
  ansible.builtin.template:
    src: templates/cloud.conf.j2
    dest: /etc/kubernetes/cloud-config
    mode: '0644'

- name: Generate kubeadm.conf for No Cloud provider
  become: true
  when: is_cloud == '0'
  ansible.builtin.template:
    src: templates/nocloud-kubeadm.conf.j2
    dest: /etc/kubernetes/kubeadm.conf
    mode: '0644'

- name: Generate kubeadm.conf for Openstack provider
  become: true
  when: is_cloud == '1'
  ansible.builtin.template:
    src: templates/cloud-kubeadm.conf.j2
    dest: /etc/kubernetes/kubeadm.conf
    mode: '0644'

- name: Get cloud ssl certificate file
  become: true
  when:
    - is_cloud == '1'
    - cloud_crt_path != ''
  ansible.builtin.copy:
    src: "{{ cloud_crt_path }}"
    dest: /usr/local/share/ca-certificates/cloud.crt
    mode: '0644'

- name: Add cloud cert to linux store
  become: true
  when:
    - is_cloud == '1'
    - cloud_crt_path != ''
  ansible.builtin.shell: |
    update-ca-certificates
    touch {{ ansible_env.HOME }}/.cloudcert
  args:
    creates: "{{ ansible_env.HOME }}/.cloudcert"

- name: Kubelet cloud arguments
  become: true
  when: is_cloud == '1'
  ansible.builtin.lineinfile:
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    regexp: "^Environment=\"KUBELET_KUBECONFIG_ARGS\".*$"
    line: >
      Environment="KUBELET_KUBECONFIG_ARGS=--cloud-provider=external
      --cloud-config=/etc/kubernetes/cloud-config
      --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
  notify: Restart kubelet service

- name: Init manager node
  become: true
  when:
    - kubernetes_node_type == 'admin'
  run_once: true
  ansible.builtin.shell: |
    kubeadm reset -f
    kubeadm init --config /etc/kubernetes/kubeadm.conf
  args:
    creates: "{{ ansible_env.HOME }}/.kube/config"

- name: Ensure .kube folder exist
  when: kubernetes_node_type == 'admin'
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
    mode: '0755'

- name: Generate kubeconfig for current user
  when: kubernetes_node_type == 'admin'
  ansible.builtin.copy:
    remote_src: true
    src: /etc/kubernetes/admin.conf
    dest: "{{ ansible_env.HOME }}/.kube/config"
    mode: '0600'

- name: Get token from control-plane node
  become: true
  when: kubernetes_node_type == 'worker'
  ansible.builtin.shell: |
    set -e -o pipefail
    kubeadm token list | tail -n +2 | head -n 1 | sed "s/ .*//"
  args:
    executable: /bin/bash
  register: k8s_token
  delegate_to: "{{ k8s_manager_hostname }}"
  changed_when: false

- name: Add k8snode
  become: true
  when:
    - kubernetes_node_type == 'worker'
  ansible.builtin.shell: >
    kubeadm join --token {{ k8s_token.stdout }} --discovery-token-unsafe-skip-ca-verification
    --node-name {{ inventory_hostname }} --cri-socket=unix:///var/run/crio/crio.sock {{ k8s_manager_ip }}:443;
    touch {{ ansible_env.HOME }}/.k8sinstall
  args:
    creates: "{{ ansible_env.HOME }}/.k8sinstall"

- name: Wait for kubernetes API is reachable
  ansible.builtin.wait_for:
    host: "{{ k8s_manager_ip }}"
    port: 443
    delay: 5

- name: Ensure kubelet is in a running state
  become: true
  ansible.builtin.service:
    name: kubelet
    state: started
  register: k8s_kubelet_details
  until: k8s_kubelet_details.status.ActiveState == "active"
  retries: 25
  delay: 20

...
