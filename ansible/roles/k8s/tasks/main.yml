---

- name: Install kubernetes python package
  ansible.builtin.pip:
    name: kubernetes=={{ k8s_kubernetes_python_version }}

- name: Update /etc/hosts - Remove hostname to 127.0.0.1 resolved hosts
  become: true
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: '^127\.0\.0\.1'
    line: '127.0.0.1 localhost'
    owner: root
    group: root
    mode: '0644'

- name: Update /etc/hosts - Ensure private ip for master1 resolved hosts
  become: true
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: '{{ k8s_master_hostname }}$'
    line: '{{ k8s_master_ip }} {{ k8s_master_hostname }}'
    owner: root
    group: root
    mode: '0644'

- name: Update /etc/hosts - Ensure private ip for k8s nodes resolved hosts
  become: true
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: '{{ item.name }}$'
    line: '{{ item.ip }} {{ item.name }}'
    owner: root
    group: root
    mode: '0644'
  loop: "{{ k8s_nodes }}"

- name: Prepare kubeproxy as a service
  become: true
  when:
    - kubernetes_node_type == 'admin'
    - is_cloud == '0'
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=Launch proxy service on Kubernetes instance
      After=syslog.target network.target auditd.service crio.service

      [Service]
      ExecStart=kubectl proxy --address={{ k8s_master_ip }} --accept-hosts='^.*$'
      User={{ ansible_user }}
      Restart=always
      RestartSec=30


      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/kubeproxy.service
    owner: root
    mode: '0755'

- name: Disable swap
  become: true
  ansible.builtin.command: swapoff -a
  args:
    creates: /home/{{ ansible_user }}/.k8sinstall

- name: Remove Swap from fstab
  become: true
  ansible.builtin.lineinfile:
    dest: /etc/fstab
    regexp: '^.*swap.*$'
    state: absent

- name: Ensure /etc/kubernetes folder is present
  become: true
  ansible.builtin.file:
    path: /etc/kubernetes
    owner: root
    state: directory
    mode: '0755'

- name: Install route package
  become: true
  ansible.builtin.apt:
    name: net-tools
    state: present
    update_cache: true
    force: true

- name: Generate cloud-config file (for Openstack provider)
  become: true
  when: is_cloud == '1'
  ansible.builtin.template:
    src: templates/cloud.conf.j2
    dest: /etc/kubernetes/cloud-config
    mode: '0644'

- name: Generate kubeadm.conf for No Cloud provider
  become: true
  when: is_cloud == '0'
  ansible.builtin.template:
    src: templates/nocloud-kubeadm.conf.j2
    dest: /etc/kubernetes/kubeadm.conf
    mode: '0644'

- name: Generate kubeadm.conf for Openstack provider
  become: true
  when: is_cloud == '1'
  ansible.builtin.template:
    src: templates/cloud-kubeadm.conf.j2
    dest: /etc/kubernetes/kubeadm.conf
    mode: '0644'

- name: Get cloud ssl certificate file
  become: true
  when:
    - is_cloud == '1'
    - cloud_crt_path != ''
  ansible.builtin.copy:
    src: "{{ cloud_crt_path }}"
    dest: /usr/local/share/ca-certificates/cloud.crt
    mode: '0644'

- name: Add cloud cert to certificates store
  become: true
  when:
    - is_cloud == '1'
    - cloud_crt_path != ''
  ansible.builtin.command: update-ca-certificates
  args:
    creates: /home/{{ ansible_user }}/.k8sinstall

- name: Kubelet cloud arguments
  become: true
  when: is_cloud == '1'
  ansible.builtin.lineinfile:
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    regexp: "^Environment=\"KUBELET_KUBECONFIG_ARGS\".*$"
    line: >
      Environment="KUBELET_KUBECONFIG_ARGS=--cloud-provider=external
      --cloud-config=/etc/kubernetes/cloud-config
      --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"

- name: Restart kubelet service
  become: true
  ansible.builtin.systemd:
    name: kubelet
    state: restarted
    enabled: true
    daemon_reload: true

- name: Init manager node
  become: true
  when:
    - kubernetes_node_type == 'admin'
  run_once: true
  ansible.builtin.shell: |
    kubeadm reset -f
    kubeadm init --config /etc/kubernetes/kubeadm.conf
  args:
    creates: /home/{{ ansible_user }}/.k8sinstall

- name: Init kubeconfig for current user
  when: kubernetes_node_type == 'admin'
  run_once: true
  ansible.builtin.shell: >
    mkdir -p {{ ansible_env.HOME }}/.kube;
    sudo cp -f /etc/kubernetes/admin.conf /home/{{ ansible_user }}/.kube/config;
    sudo chown {{ ansible_user }}:{{ ansible_user }} /home/{{ ansible_user }}/.kube/config;
  args:
    creates: /home/{{ ansible_user }}/.k8sinstall

- name: Get token from control-plane node
  become: true
  run_once: true
  when: kubernetes_node_type == 'admin'
  ansible.builtin.shell: |
    set -e -o pipefail
    kubeadm token list | tail -n +2 | head -n 1 | sed "s/ .*//"
  args:
    executable: /bin/bash
    creates: /home/{{ ansible_user }}/.k8sinstall
  register: k8s_token

- name: Add k8snode
  become: true
  when:
    - kubernetes_node_type == 'worker'
  ansible.builtin.command: >
    kubeadm join --token {{ hostvars[groups['master'][0]]['k8s_token'].stdout }} --discovery-token-unsafe-skip-ca-verification
    --node-name {{ inventory_hostname }} --cri-socket=unix:///var/run/crio/crio.sock {{ k8s_master_ip }}:443
  args:
    creates: /home/{{ ansible_user }}/.k8sinstall

- name: Wait for kubernetes API is reachable
  ansible.builtin.wait_for:
    host: "{{ k8s_master_ip }}"
    port: 443
    delay: 5

- name: Taint nodes for cilium purpose
  when:
    - k8s_cni == 'cilium'
  ansible.builtin.shell: |
    kubectl taint nodes {{ inventory_hostname }} {{ k8s_cilium_node_taints }}
  args:
    creates: /home/{{ ansible_user }}/.k8sinstall
  delegate_to: "{{ k8s_master_hostname }}"

- name: Ensure kubelet is in a running state
  become: true
  ansible.builtin.service:
    name: kubelet
    state: started
  register: k8s_kubelet_details
  until: k8s_kubelet_details.status.ActiveState == "active"
  retries: 25
  delay: 20

- name: Weave CNI
  when:
    - kubernetes_node_type == 'admin'
    - k8s_cni == 'weave'
  run_once: true
  kubernetes.core.k8s:
    state: present
    src: "https://github.com/weaveworks/weave/releases/download/{{ k8s_weave_version }}/weave-daemonset-k8s.yaml"

- name: Flannel CNI
  when:
    - kubernetes_node_type == 'admin'
    - k8s_cni == 'flannel'
  run_once: true
  kubernetes.core.k8s:
    state: present
    template: templates/kube-flannel.yml.j2

- name: Calico CNI Custom
  when:
    - kubernetes_node_type == 'admin'
    - k8s_cni == 'calico'
  run_once: true
  kubernetes.core.k8s:
    state: present
    src: "{{ k8s_calico_repo }}/manifests/tigera-operator.yaml"

- name: Calico CNI Custom Settings
  when:
    - kubernetes_node_type == 'admin'
    - k8s_cni == 'calico'
  kubernetes.core.k8s:
    state: present
    template: templates/calico-custom-resources.yml.j2

- name: Add cilium chart repo
  when:
    - kubernetes_node_type == 'admin'
    - k8s_cni == 'cilium'
  kubernetes.core.helm_repository:
    name: cilium-cni
    repo_url: "{{ k8s_cilium_helm_repo }}"

- name: Create cilium namespace
  when:
    - kubernetes_node_type == 'admin'
    - k8s_cni == 'cilium'
  kubernetes.core.k8s:
    name: "{{ k8s_cilium_namespace }}"
    api_version: v1
    kind: Namespace
    state: present

- name: Deploy Cilium
  when:
    - kubernetes_node_type == 'admin'
    - k8s_cni == 'cilium'
  kubernetes.core.helm:
    name: cilium
    chart_ref: "cilium-cni/cilium"
    chart_version: "{{ k8s_cilium_version }}"
    release_namespace: "{{ k8s_cilium_namespace }}"

- name: Add metrics addon
  when: kubernetes_node_type == 'admin'
  run_once: true
  kubernetes.core.k8s:
    state: present
    src: "{{ k8s_metric_repo }}/releases/download/{{ k8s_metric_server_version }}/components.yaml"

- name: Create secret from cloud-config file for openstack controller manager
  when:
    - kubernetes_node_type == 'admin'
    - is_cloud == '1'
  run_once: true
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: cloud-config
        namespace: kube-system
      type: Opaque
      data:
        cloud.conf: "{{ lookup('template', 'cloud.conf.j2') | b64encode }}"

- name: Openstack controller manager
  when:
    - kubernetes_node_type == 'admin'
    - is_cloud == '1'
  run_once: true
  kubernetes.core.k8s:
    state: present
    src: "{{ item }}"
  loop:
    - "{{ k8s_os_provider_manifest_path }}/controller-manager/cloud-controller-manager-roles.yaml"
    - "{{ k8s_os_provider_manifest_path }}/controller-manager/cloud-controller-manager-role-bindings.yaml"
    - "{{ k8s_os_provider_manifest_path }}/controller-manager/openstack-cloud-controller-manager-ds.yaml"

- name: Openstack Cinder CSI Plugin
  when:
    - kubernetes_node_type == 'admin'
    - is_cloud == '1'
  run_once: true
  kubernetes.core.k8s:
    state: present
    src: "{{ item }}"
  loop:
    - "{{ k8s_os_provider_manifest_path }}/cinder-csi-plugin/cinder-csi-controllerplugin-rbac.yaml"
    - "{{ k8s_os_provider_manifest_path }}/cinder-csi-plugin/cinder-csi-controllerplugin.yaml"
    - "{{ k8s_os_provider_manifest_path }}/cinder-csi-plugin/cinder-csi-nodeplugin-rbac.yaml"
    - "{{ k8s_os_provider_manifest_path }}/cinder-csi-plugin/cinder-csi-nodeplugin.yaml"
    - "{{ k8s_os_provider_manifest_path }}/cinder-csi-plugin/csi-cinder-driver.yaml"

- name: Proxy manager node
  become: true
  when:
    - kubernetes_node_type == 'admin'
    - is_cloud == '0'
  ansible.builtin.systemd:
    state: restarted
    daemon_reload: true
    name: kubeproxy

- name: Apply cinder storage class
  when:
    - kubernetes_node_type == 'admin'
    - is_cloud == '1'
  run_once: true
  kubernetes.core.k8s:
    state: present
    template: templates/cinder-sc.yml.j2

- name: Get contents of authkey
  ansible.builtin.command: cat {{ ansible_env.HOME }}/.ssh/authorized_keys
  register: k8s_authkey
  changed_when: false

- name: Set authorized key for root user
  become: true
  ansible.posix.authorized_key:
    user: "root"
    state: present
    key: "{{ k8s_authkey.stdout }}"

- name: End k8s install
  ansible.builtin.file:
    dest: ~/.k8sinstall
    state: touch
    force: true
    mode: '0600'

...
