---

- name: Install kubernetes python package
  ansible.builtin.pip:
    name: kubernetes=={{ k8s_kubernetes_python_version }}

- name: Update /etc/hosts - Remove hostname to 127.0.0.1 resolved hosts
  become: yes
  lineinfile: dest=/etc/hosts regexp='^127\.0\.0\.1' line='127.0.0.1 localhost' owner=root group=root mode=0644

- name: Update /etc/hosts - Ensure private ip for master1 resolved hosts
  become: yes
  lineinfile: dest=/etc/hosts regexp='{{ k8s_master_hostname }}$' line='{{ k8s_master_ip }} {{ k8s_master_hostname }}' owner=root group=root mode=0644

- name: Update /etc/hosts - Ensure private ip for k8s nodes resolved hosts
  become: yes
  lineinfile: dest=/etc/hosts regexp='{{ item.name }}$' line='{{ item.ip }} {{ item.name }}' owner=root group=root mode=0644
  loop: "{{ k8s_nodes }}"

- name: Restart kubeproxy at reboot
  become: yes
  when:
    - kubernetes_node_type == 'admin'
    - is_cloud == '0'
  copy:
    content: |
             #!/bin/bash
             sudo -i -u {{ ansible_user}} nohup kubectl proxy --address={{ k8s_master_ip }} --accept-hosts='^.*$' &
             exit
    dest: /etc/rc.local
    owner: root
    mode: 0755

- name: swapoff
  become: yes
  shell: swapoff -a
  args:
    creates: /home/{{ ansible_user }}/.k8sinstall

- name: Remove Swap from fstab
  become: yes
  lineinfile:
    dest: /etc/fstab
    regexp: '^.*swap.*$'
    state: absent

- name: Ensure /etc/kubernetes folder is present
  become: yes
  file:
    path: /etc/kubernetes
    owner: root
    state: directory
    mode: 0755

- name: Install route package
  become: yes
  apt:
    name: net-tools
    state: present
    update_cache: true
    force: yes

- name: generate cloud-config
  become: yes
  when: is_cloud == '1'
  template:
    src: templates/cloud.conf.j2
    dest: /etc/kubernetes/cloud-config
    mode: 0644

- name: generate kubeadm.conf
  become: yes
  when: is_cloud == '0'
  template:
    src: templates/nocloud-kubeadm.conf.j2
    dest: /etc/kubernetes/kubeadm.conf
    mode: 0644

- name: generate kubeadm.conf
  become: yes
  when: is_cloud == '1'
  template:
    src: templates/cloud-kubeadm.conf.j2
    dest: /etc/kubernetes/kubeadm.conf
    mode: 0644

- name: cloud ssl certificate file
  become: yes
  when:
    - is_cloud == '1'
    - cloud_crt_path != ''
  copy:
    src: "{{ cloud_crt_path }}"
    dest: /usr/local/share/ca-certificates/cloud.crt

- name: add cloud cert to certificates store
  become: yes
  when:
    - is_cloud == '1'
    - cloud_crt_path != ''
  shell: update-ca-certificates

- name: Kubelet cloud arguments
  become: yes
  when: is_cloud == '1'
  lineinfile:
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    regexp: "^Environment=\"KUBELET_KUBECONFIG_ARGS\".*$"
    line: "Environment=\"KUBELET_KUBECONFIG_ARGS=--cloud-provider=external --cloud-config=/etc/kubernetes/cloud-config --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf\""

- name: Restart kubelet service
  become: yes
  systemd:
    name: kubelet
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: init master
  become: yes
  when:
    - kubernetes_node_type == 'admin'
  run_once: true
  shell: |
    kubeadm reset -f
    kubeadm init --config /etc/kubernetes/kubeadm.conf
  args:
    creates: /home/{{ ansible_user }}/.k8sinstall

- name: "init {{ ansible_user }} env"
  when: kubernetes_node_type == 'admin'
  run_once: true
  shell: >
    mkdir -p /home/{{ ansible_user }}/.kube;
    sudo cp -f /etc/kubernetes/admin.conf /home/{{ ansible_user }}/.kube/config;
    sudo chown {{ ansible_user }}:{{ ansible_user }} /home/{{ ansible_user }}/.kube/config;

- name: get token
  become: yes
  run_once: true
  when: kubernetes_node_type == 'admin'
  shell:  kubeadm token list | tail -n +2 | head -n 1 | sed "s; .*;;"
  register: master_token

- name: Add k8snode
  become: yes
  when:
    - kubernetes_node_type == 'worker'
  shell: "kubeadm join --token {{ hostvars[groups['master'][0]]['master_token'].stdout }} --discovery-token-unsafe-skip-ca-verification --node-name {{ inventory_hostname }} --cri-socket=unix:///var/run/crio/crio.sock {{ k8s_master_ip }}:443"
  args:
    creates: /home/{{ ansible_user }}/.k8sinstall

#- name: Wait until the file .kube/config is present before continuing
#  ansible.builtin.wait_for:
#    path: /home/{{ ansible_user }}/.kube/config
#  delegate_to: "{{ k8s_master_hostname }}"
#
#- name: Wait until kubeconfig is well setted
#  ansible.builtin.wait_for:
#    path: /home/{{ ansible_user }}/.kube/config
#    search_regex: "server: https://{{ k8s_master_ip }}:443"
#  delegate_to: "{{ k8s_master_hostname }}"

- name: Wait for kubernetes API is reachable
  ansible.builtin.wait_for:
    host: "{{ k8s_master_ip }}"
    port: 443
    delay: 5

- name: Taint nodes for cilium purpose
  when:
    - k8s_cni == 'cilium'
  shell: |
    kubectl taint nodes {{ inventory_hostname }} {{ k8s_cilium_node_taints }}
  args:
    creates: /home/{{ ansible_user }}/.k8sinstall
  delegate_to: "{{ k8s_master_hostname }}"

- name: Ensure kubelet is in a running state
  become: yes
  service:
    name: kubelet
    state: started
  register: kubelet_details
  until: kubelet_details.status.ActiveState == "active"
  retries: 25
  delay: 20

- name: Weave CNI
  when:
    - kubernetes_node_type == 'admin'
    - k8s_cni == 'weave'
  run_once: true
  kubernetes.core.k8s:
    state: present
    src: "https://github.com/weaveworks/weave/releases/download/{{ k8s_weave_version }}/weave-daemonset-k8s.yaml"

- name: Flannel CNI
  when:
    - kubernetes_node_type == 'admin'
    - k8s_cni == 'flannel'
  run_once: true
  kubernetes.core.k8s:
    state: present
    template: templates/kube-flannel.yml.j2

- name: Calico CNI Custom
  when:
    - kubernetes_node_type == 'admin'
    - k8s_cni == 'calico'
  run_once: true
  kubernetes.core.k8s:
    state: present
    src: https://raw.githubusercontent.com/projectcalico/calico/{{ k8s_calico_version }}/manifests/tigera-operator.yaml

- name: Calico CNI Custom Settings
  when:
    - kubernetes_node_type == 'admin'
    - k8s_cni == 'calico'
  kubernetes.core.k8s:
    state: present
    template: templates/calico-custom-resources.yml.j2

- name: Add cilium chart repo
  when:
    - kubernetes_node_type == 'admin'
    - k8s_cni == 'cilium'
  kubernetes.core.helm_repository:
    name: cilium-cni
    repo_url: "{{ k8s_cilium_helm_repo }}"

- name: Create cilium namespace
  when:
    - kubernetes_node_type == 'admin'
    - k8s_cni == 'cilium'
  kubernetes.core.k8s:
    name: "{{ k8s_cilium_namespace }}"
    api_version: v1
    kind: Namespace
    state: present

- name: Deploy Cilium
  when:
    - kubernetes_node_type == 'admin'
    - k8s_cni == 'cilium'
  kubernetes.core.helm:
    name: cilium
    chart_ref: "cilium-cni/cilium"
    chart_version: "{{ k8s_cilium_version }}"
    release_namespace: "{{ k8s_cilium_namespace }}"

- name: Add metrics addon
  when: kubernetes_node_type == 'admin'
  run_once: true
  kubernetes.core.k8s:
    state: present
    src: https://github.com/kubernetes-sigs/metrics-server/releases/download/{{ k8s_metric_server_version }}/components.yaml

- name: Create secret from cloud-config file for openstack controller manager
  when:
    - kubernetes_node_type == 'admin'
    - is_cloud == '1'
  run_once: true
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: cloud-config
        namespace: kube-system
      type: Opaque
      data:
        cloud.conf: "{{ lookup('template', 'cloud.conf.j2') | b64encode }}"

- name: Openstack controller manager
  when:
    - kubernetes_node_type == 'admin'
    - is_cloud == '1'
  run_once: true
  kubernetes.core.k8s:
    state: present
    src: "{{ item }}"
  loop:
    - https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/{{ k8s_openstack_provider_version }}/manifests/controller-manager/cloud-controller-manager-roles.yaml
    - https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/{{ k8s_openstack_provider_version }}/manifests/controller-manager/cloud-controller-manager-role-bindings.yaml
    - https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/{{ k8s_openstack_provider_version }}/manifests/controller-manager/openstack-cloud-controller-manager-ds.yaml

- name: Openstack Cinder CSI Plugin
  when:
    - kubernetes_node_type == 'admin'
    - is_cloud == '1'
  run_once: true
  kubernetes.core.k8s:
    state: present
    src: "{{ item }}"
  loop:
    - https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/{{ k8s_openstack_provider_version }}/manifests/cinder-csi-plugin/cinder-csi-controllerplugin-rbac.yaml
    - https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/{{ k8s_openstack_provider_version }}/manifests/cinder-csi-plugin/cinder-csi-controllerplugin.yaml
    - https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/{{ k8s_openstack_provider_version }}/manifests/cinder-csi-plugin/cinder-csi-nodeplugin-rbac.yaml
    - https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/{{ k8s_openstack_provider_version }}/manifests/cinder-csi-plugin/cinder-csi-nodeplugin.yaml
    - https://raw.githubusercontent.com/kubernetes/cloud-provider-openstack/{{ k8s_openstack_provider_version }}/manifests/cinder-csi-plugin/csi-cinder-driver.yaml


- name: proxy master
  when:
    - kubernetes_node_type == 'admin'
    - is_cloud == '0'
  shell: nohup kubectl proxy --address={{ k8s_master_ip }} --accept-hosts='^.*$' &
  args:
    creates: ~/.k8sinstall

- name: Apply cinder storage class
  when:
    - kubernetes_node_type == 'admin'
    - is_cloud == '1'
  run_once: true
  kubernetes.core.k8s:
    state: present
    template: templates/cinder-sc.yml.j2

- name: get contents of authkey
  command: cat /home/{{ ansible_user }}/.ssh/authorized_keys
  register: authkey

- name: Set authorized key for root user
  become: yes
  authorized_key:
    user: "root"
    state: present
    key: "{{ authkey.stdout }}"

- name: end install
  file:
    dest: ~/.k8sinstall
    state: touch
    force: yes
